{"version":3,"sources":["styles/base/_typography.scss","styles/abstracts/_variables.scss","styles/abstracts/_utilities.scss","styles/abstracts/_maps.scss","styles/utilities/_fonts.scss","styles/utilities/_layout.scss","styles/base/_base.scss","styles/base/_reset.scss","styles/components/_button.scss","styles/abstracts/_mixins.scss","styles/components/_form.scss","styles/components/_thin-border.scss"],"names":[],"mappings":"AAGQ;ACDR;EAEM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAKG;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAKH;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;;ACEH;EACG,kBCXG;;;ADMH;EACG,OCPA;;;ADUN;EACG,kBCXG;;;ADMH;EACG,OCPA;;;ADUN;EACG,kBCXG;;;ADMH;EACG,OCPA;;;ADUN;EACG,kBCXG;;;ADUN;EACG,kBCXG;;;ADUN;EACG,kBCXG;;;ADUN;EACG,kBCXG;;;ADMH;EACG,OCPA;;;ADUN;EACG,kBCXG;;;ADkBA;EACG,WCRC;;;ADOJ;EACG,WCRC;;;ADOJ;EACG,WCRC;;;ADOJ;EACG,WCRC;;;ADOJ;EACG,WCRC;;;ADeJ;EACG,aChBC;;;ADuBJ;EACG,aCxBC;;;ADuBJ;EACG,aCxBC;;;ADuBJ;EACG,aCxBC;;;ADuBJ;EACG,aCxBC;;;AD+BJ;EACG,aChCC;;;AD+BJ;EACG,aChCC;;;AD+BJ;EACG,aChCC;;;AD+BJ;EACG,aChCC;;;AD+BJ;EACG,aChCC;;;ADuCJ;EACG,YCxCC;;;ACfb;AAEA;EACG;EACA;;;AAGH;EAEG;EACA;;;AAkBH;AAEA;EACG;;;AC/BH;EACG;EACA;EACA;EACA;;;AAGH;EACG;;;AAGH;EACG;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGH;EACG;;;AClBH;EACG;EACA;EACA;;;AAGH;EACG;;;AAIA;EACG;;;ACpBN;AACA;AAAA;AAAA;EAGG;;;AAGH;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUG;;;AAGH;AACA;AAAA;EAEG;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;EACG;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;AAAA;EAEG;EACA;;;AAGH;AACA;AAAA;AAAA;AAAA;EAIG;;;AAGH;AACA;EACG;IACG;;;EAEH;AAAA;AAAA;IAGG;IACA;IACA;IACA;;;ACrEN;EACG;;ACUA;EDHG;EACA;EACA;;ACCH;EDGM;;ACHN;EDaM;;ACbN;ED4BG;EACA;EACA;;AC9BH;EDqCG;;ACrCH;EDyCG;;;AEpDN;EAGG;EACA;EACA;EACA;;AACA;EACG;;AAEH;EAEG;;ADDH;ECKG;;AACA;EACG;;ADbN;ECkBG;;ADlBH;ECsBG;;;ADkBA;EACG;EACA;EACA;EACA,OEhDgB;EFiDhB,QEjDsB;EAEzB;EACA","file":"main.48b3db1d.css","sourceRoot":"../src","sourcesContent":["@use 'abstracts' as *;\n@use 'utilities' as *;\n\n@import url('https://fonts.googleapis.com/css2?family=Livvic:wght@400;500;600;700&display=swap');\n\nbody {\n   @extend %fs-200;\n   @extend %fw-regular;\n}\n","@use 'maps' as *;\n\n:root {\n   @each $color, $value in $colors {\n      --clr-#{$color}: #{$value};\n   }\n\n   @each $screen-size, $font-size in $typography {\n      @each $size, $value in $font-size {\n         --#{$size}: #{$value};\n      }\n   }\n\n   @each $prop, $value in $layout {\n      --#{$prop}: #{$value};\n   }\n}\n","@use 'maps' as *;\n\n@each $color, $value in $colors {\n   @if $color ==\n      pm-white or\n      $color ==\n      pm-coral or\n      $color ==\n      rapture-blue or\n      $color ==\n      dark-green\n   {\n      .text-#{$color} {\n         color: $value;\n      }\n   }\n   .bg-#{$color} {\n      background-color: $value;\n   }\n}\n\n@each $font, $map in $typography {\n   @if $font == sizes {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-size: $value;\n         }\n      }\n   }\n\n   @if $font == family {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-family: $value;\n         }\n      }\n   }\n\n   @if $font == weights {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-weight: $value;\n         }\n      }\n   }\n\n   @if $font == line-heights {\n      @each $property, $value in $map {\n         .#{$property} {\n            line-height: $value;\n         }\n      }\n   }\n\n   @if $font == alignment {\n      @each $property, $value in $map {\n         .#{$property} {\n            text-align: $value;\n         }\n      }\n   }\n}\n","$breakpoints: (\n   tablet: 20em,\n   medium: 40em,\n   large: 60em,\n);\n\n$colors: (\n   pm-green: hsl(186 98% 17%),\n   pm-coral: hsl(0 87% 73%),\n   pm-white: hsl(0 0% 100%),\n   rapture-blue: hsl(179 42% 63%),\n   police-blue: hsl(187 41% 29%),\n   jungle-green: hsl(186 100% 14%),\n   sacramento-green: hsl(186 96% 10%),\n   dark-green: hsl(186 100% 8%),\n);\n\n$typography: (\n   sizes: (\n      fs-600: 6.6667rem,\n      fs-500: 4.2667rem,\n      fs-400: 3.2rem,\n      fs-300: 1.2rem,\n      fs-200: 0.9375rem,\n   ),\n   family: (\n      ff-serif: 'Livvic' sans-serif,\n   ),\n   weights: (\n      fw-regular: 400,\n      fw-medium: 500,\n      fw-semi-bold: 600,\n      fw-bold: 700,\n   ),\n   line-heights: (\n      lh-600: 1,\n      lh-500: 0.875,\n      lh-400: 1,\n      lh-300: 1.5556,\n      lh-200: 1.666,\n   ),\n   alignment: (\n      ta-center: center,\n   ),\n);\n\n$layout: (\n   margin-test: 2rem,\n   align-mw: 60rem,\n   ct-padding-sm: 2rem 0,\n   // footer + cta\n   ct-padding-md: 3rem 0,\n   // clients\n   ct-padding-lg: 4rem 0,\n   // evertyhing else\n   gap: 1rem,\n   flow-space: 1rem,\n);\n","@use 'abstracts' as *;\n\n/* ----- font sizes + line heights ------ */\n\n%fs-200 {\n   font-size: var(--fs-200, 0.9375rem);\n   line-height: var(--lh-200, 1.666);\n}\n\n%fs-300 {\n   // contact\n   font-size: var(--fs-300, 1.2rem);\n   line-height: var(--lh-300, 1.5556);\n}\n\n%fs-400 {\n   font-size: var(--fs-400, 3.2rem);\n   line-height: var(--lh-400, 1);\n}\n\n%fs-500 {\n   font-size: var(--fs-500, 4.2667rem);\n   line-height: var(--lh-500, 0.875);\n}\n\n%fs-600 {\n   font-size: var(--fs-600, 6.6667rem);\n   line-height: var(--lh-600, 1);\n}\n\n/* ----- font weights ------ */\n\n%fw-regular {\n   font-weight: var(--fw-regular, 400);\n}\n\n%fw-medium {\n   font-weight: var(--fw-medium, 500);\n}\n\n%fw-sbold {\n   font-weight: var(--fw-semi-bold, 600);\n}\n\n%fw-bold {\n   font-weight: var(--fw-bold, 700);\n}\n","@use 'abstracts' as *;\n\n.container {\n   width: 90%;\n   max-width: var(--align-mw);\n   margin-inline: auto;\n   outline: 1px solid white;\n}\n\n.flow > *:where(:not(:first-child)) {\n   margin-top: var(--flow-space, 1rem);\n}\n\n.sr-only {\n   position: absolute;\n   width: 1px;\n   height: 1px;\n   padding: 0;\n   margin: -1px;\n   overflow: hidden;\n   clip: rect(0, 0, 0, 0);\n   white-space: nowrap;\n   border: 0;\n}\n\n.hidden {\n   display: none;\n}\n\n%flex {\n   display: flex;\n   gap: var(--gap, 1rem);\n}\n\n%space-between {\n   justify-content: space-between;\n   align-items: center;\n}\n\n%grid {\n   display: grid;\n   gap: var(--gap, 1rem);\n}\n\n%block {\n   display: block;\n}\n","@use 'abstracts' as *;\n@use 'utilities' as *;\n\nbody {\n   // @extend %bg-green-pm;\n   // @extend %text-white;\n}\n\nfieldset {\n   padding: 0;\n   margin: 0;\n   border: none;\n}\n\na {\n   text-decoration: none;\n}\n\nbutton {\n   &:hover {\n      cursor: pointer;\n   }\n}\n\n// input {\n//    border: none;\n//    outline: 1px solid;\n// }\n\n// Accessibility\n\n// :focus-within {\n//    outline: 3px dotted red;\n// }\n","/* Box sizing rules */\n*,\n*::before,\n*::after {\n   box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n   margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n   list-style: none;\n   padding: 0;\n   margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n   scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n   min-height: 100vh;\n   text-rendering: optimizeSpeed;\n   line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n   text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n   max-width: 100%;\n   display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n   font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n   html:focus-within {\n      scroll-behavior: auto;\n   }\n   *,\n   *::before,\n   *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n   }\n}\n","@use 'abstracts' as *;\n@use 'utilities' as *;\n\n.btn {\n   border-radius: 50px;\n\n   // =========================================\n   // primary\n   // =========================================\n\n   @include m(pm) {\n      padding: 1em 3em;\n      border: 2px solid;\n      text-decoration: none;\n\n      @include m(light) {\n         // @extend %text-white;\n         border-color: hsl(var(--clr-pm-white));\n         &:hover {\n            // @extend %bg-white;\n            // @extend %text-dark;\n         }\n      }\n\n      @include m(dark) {\n         // @extend %text-dark;\n         // @extend %bg-transparent;\n         border-color: hsl(var(--clr-dark-green));\n         &:hover {\n            // @extend %bg-green-dark;\n            // @extend %text-white;\n         }\n      }\n   }\n\n   // =========================================\n   // secondary\n   // =========================================\n\n   @include m(sd) {\n      // @extend %text-dark;\n      // @extend %bg-white;\n      padding: 0.5em 2em;\n      border: none;\n      outline: none;\n      &:hover {\n         // @extend %bg-rapture;\n      }\n   }\n\n   @include m(contact) {\n      padding: 0.7em 2em;\n   }\n\n   @include m(disabled) {\n      opacity: 0.5;\n   }\n}\n","@use 'variables' as *;\n@use 'maps' as *;\n\n// =========================================\n// BEM\n// =========================================\n\n@mixin e($element) {\n   &__#{$element} {\n      @content;\n   }\n}\n\n@mixin m($modifier) {\n   &--#{$modifier} {\n      @content;\n   }\n}\n\n// =========================================\n// flex\n// =========================================\n\n@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {\n   display: $disp;\n   flex-direction: $dir;\n   flex-wrap: $wrap;\n   justify-content: $just;\n   align-items: $align;\n}\n\n// =========================================\n// BG-IMG\n// =========================================\n\n@mixin bg-img($img, $position, $size) {\n   background-image: url('#{$img}');\n   background-repeat: no-repeat;\n   background-position: #{$position};\n   background-size: #{$size};\n}\n\n// =========================================\n// pseudo-el\n// =========================================\n\n@mixin p-el($el, $width: null, $height: null) {\n   @if $el == 'before' or $el == 'after' {\n      &::#{$el} {\n         content: '';\n         position: absolute;\n         display: block;\n         width: $width;\n         height: $height;\n         @content;\n      }\n   } @else {\n      @error 'Before or after string required for valid pseudo element.';\n   }\n}\n\n// =========================================\n// media query\n// =========================================\n\n@mixin mq($key) {\n   @if $key == 'tablet' or $key == 'medium' or $key == 'large' {\n      @media (min-width: map-get($breakpoints, $key)) {\n         @content;\n      }\n   } @else {\n      @error 'Tablet, medium or large required for valid media query.';\n   }\n}\n\n// =========================================\n// feature query\n// =========================================\n\n@mixin fq($prop, $val) {\n   @supports (#{$prop}: $val) {\n      @content;\n   }\n}\n","@use 'abstracts' as *;\n@use 'utilities' as *;\n\n.form {\n   // @extend %bg-transparent;\n   // @extend %text-white;\n   width: 100%;\n   padding-top: 1rem;\n   border: 0 0 0.1px solid hsl(var(--clr-pm-white)) 0;\n   outline: none;\n   &::placeholder {\n      color: hsl(var(--clr-pm-white) / 0.7);\n   }\n   &:hover,\n   &:focus {\n      border-bottom-color: hsl(var(--clr-rapture-blue));\n   }\n\n   @include m(error) {\n      border-bottom-color: hsl(var(--clr-pm-coral));\n      &::placeholder {\n         color: hsl(var(--clr-pm-coral) / 0.7);\n      }\n   }\n\n   @include e(input) {\n      padding-bottom: 0.8rem;\n   }\n\n   @include e(text-area) {\n      padding-bottom: 3rem;\n   }\n}\n","@use 'abstracts' as *;\n@use 'utilities' as *;\n\n.small-border {\n   @include p-el(before, 20px, 5px) {\n      // @extend %bg-coral;\n      top: 0;\n      left: 0;\n   }\n   .hero &::before {\n      // @extend %bg-rapture;\n   }\n}\n"]}