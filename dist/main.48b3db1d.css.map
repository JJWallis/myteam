{"version":3,"sources":["styles/base/_typography.scss","styles/abstracts/_variables.scss","styles/abstracts/_utilities.scss","styles/base/_base.scss","styles/base/_reset.scss","styles/components/_button.scss","styles/abstracts/_mixins.scss","styles/components/_form.scss","styles/components/_nav.scss","styles/components/_thin-border.scss","styles/layout/_header.scss"],"names":[],"mappings":"AAEQ;ACAR;EAEM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAKG;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAMH;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;;;ACCH;EACG;;;AALA;EACG;;;AAGN;EACG;;;AALA;EACG;;;AAGN;EACG;;;AALA;EACG;;;AAGN;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AALA;EACG;;;AAGN;EACG;;;AAOG;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AAOH;EACG;;;AAOH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AAOH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AAOH;EACG;;;AAUZ;EACG;EACA;EACA;EACA;;;AAGH;EACG;;;AAGH;EACG;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAGH;EACG;;;AAGH;EACG;EACA;;;AC9FH;EACG;EACA;EACA;;;AAGH;EACG;;;AAGH;EACG;EACA;EACA;;AACA;EACG;;;ACjBN;AACA;AAAA;AAAA;EAGG;;;AAGH;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUG;;;AAGH;AACA;AAAA;EAEG;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;EACG;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;AAAA;EAEG;EACA;;;AAGH;AACA;AAAA;AAAA;AAAA;EAIG;;;AAGH;AACA;EACG;IACG;;;EAEH;AAAA;AAAA;IAGG;IACA;IACA;IACA;;;ACtEN;EACG;;ACWA;EDJG;EACA;EACA;;ACEH;EDEM;;ACFN;EDYM;;ACZN;ED2BG;EACA;EACA;;AC7BH;EDoCG;;ACpCH;EDwCG;;;AEpDN;EAGG;EACA;EACA;EACA;;AACA;EACG;;AAEH;EAEG;;ADAH;ECIG;;AACA;EACG;;ADZN;ECiBG;;ADjBH;ECqBG;;;AC7BN;AAAA;AAAA;AAAA;AFwEM;EACG,SGtEgB;EHuEhB;EACA;EACA,OGzEsB;EAEzB;EACA;;AHQH;EIVG;EACA;;AJGH;EIAG;;;AJ0GA;EIhGN;IAEM;IJiBH,SIhB6B;IAC1B;IJ0BH,UIzBqB;IJ0BrB,OI1BuC;IJ4BvC,SI5ByD;IACtD;IACA;;;;AJyFA;EInFN;AAAA;IAGM;;;;AJpBH;EI4BG","file":"main.48b3db1d.css","sourceRoot":"../src","sourcesContent":["@use 'abstracts' as *;\n\n@import url('https://fonts.googleapis.com/css2?family=Livvic:wght@400;500;600;700&display=swap');\n\nbody {\n   // @extend %fs-200;\n   // @extend %fw-regular;\n}\n","@use 'maps' as *;\n\n:root {\n   @each $color, $value in $colors {\n      --clr-#{$color}: #{$value};\n   }\n\n   @each $screen-size, $font-size in $typography {\n      @each $size, $value in $font-size {\n         --#{$size}: #{$value};\n      }\n   }\n\n   @each $prop, $value in $layout {\n      // @if $prop == small {doBelow - change to nested loop within}\n      --#{$prop}: #{$value};\n      // @else {\n      // @include mq(medium) {\n      // nested loop within - on medium map\n      // }\n      // }\n      // or hard code - barely any\n   }\n   // mq - re-assign layout variables (flex-basis px - %, gap, text-alignment)\n}\n","@use 'maps' as *;\n\n@each $color, $value in $colors {\n   @if $color ==\n      pm-white or\n      $color ==\n      pm-coral or\n      $color ==\n      rapture-blue or\n      $color ==\n      dark-green\n   {\n      .text-#{$color} {\n         color: var(--clr-#{$color}, $value);\n      }\n   }\n   .bg-#{$color} {\n      background-color: var(--clr-#{$color}, $value);\n   }\n}\n\n@each $font, $map in $typography {\n   @if $font == sizes {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-size: var(--#{$property}, $value);\n         }\n      }\n   }\n\n   @if $font == family {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-family: var(--#{$property}, $value);\n         }\n      }\n   }\n\n   @if $font == weights {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-weight: var(--#{$property}, $value);\n         }\n      }\n   }\n\n   @if $font == line-heights {\n      @each $property, $value in $map {\n         .#{$property} {\n            line-height: var(--#{$property}, $value);\n         }\n      }\n   }\n\n   @if $font == alignment {\n      @each $property, $value in $map {\n         .#{$property} {\n            text-align: var(--#{$property}, $value);\n         }\n      }\n   }\n}\n\n// =========================================\n// layout\n// =========================================\n\n.container {\n   width: 90%;\n   max-width: var(--align-mw);\n   margin-inline: auto;\n   outline: 1px solid white;\n}\n\n.flow > *:where(:not(:first-child)) {\n   margin-top: var(--flow-space, 1rem);\n}\n\n.sr-only {\n   position: absolute;\n   width: 1px;\n   height: 1px;\n   padding: 0;\n   margin: -1px;\n   overflow: hidden;\n   clip: rect(0, 0, 0, 0);\n   white-space: nowrap;\n   border: 0;\n}\n\n.hidden {\n   display: none;\n}\n\n.grid-container {\n   display: grid;\n   gap: var(--gap, 1rem);\n}\n","@use 'abstracts' as *;\n\nfieldset {\n   padding: 0;\n   margin: 0;\n   border: none;\n}\n\na {\n   text-decoration: none;\n}\n\nbutton {\n   border: none;\n   outline: none;\n   background-color: transparent;\n   &:hover {\n      cursor: pointer;\n   }\n}\n\n// input {\n//    border: none;\n//    outline: 1px solid;\n// }\n\n// Accessibility\n\n// :focus-within {\n//    outline: 3px dotted red;\n// }\n","/* Box sizing rules */\n*,\n*::before,\n*::after {\n   box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n   margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n   list-style: none;\n   padding: 0;\n   margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n   scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n   min-height: 100vh;\n   text-rendering: optimizeSpeed;\n   line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n   text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n   max-width: 100%;\n   display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n   font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n   html:focus-within {\n      scroll-behavior: auto;\n   }\n   *,\n   *::before,\n   *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n   }\n}\n","@use 'abstracts' as *;\n\n.btn {\n   border-radius: 50px;\n\n   // =========================================\n   // primary\n   // =========================================\n\n   @include m(pm) {\n      padding: 1em 3em;\n      border: 2px solid;\n      text-decoration: none;\n\n      @include m(light) {\n         // @extend %text-white;\n         border-color: hsl(var(--clr-pm-white));\n         &:hover {\n            // @extend %bg-white;\n            // @extend %text-dark;\n         }\n      }\n\n      @include m(dark) {\n         // @extend %text-dark;\n         // @extend %bg-transparent;\n         border-color: hsl(var(--clr-dark-green));\n         &:hover {\n            // @extend %bg-green-dark;\n            // @extend %text-white;\n         }\n      }\n   }\n\n   // =========================================\n   // secondary\n   // =========================================\n\n   @include m(sd) {\n      // @extend %text-dark;\n      // @extend %bg-white;\n      padding: 0.5em 2em;\n      border: none;\n      outline: none;\n      &:hover {\n         // @extend %bg-rapture;\n      }\n   }\n\n   @include m(contact) {\n      padding: 0.7em 2em;\n   }\n\n   @include m(disabled) {\n      opacity: 0.5;\n   }\n}\n","@use 'variables' as *;\n@use 'maps' as *;\n\n// =========================================\n// BEM\n// =========================================\n\n@mixin e($element) {\n   &__#{$element} {\n      @content;\n   }\n}\n\n@mixin m($modifier) {\n   &--#{$modifier} {\n      @content;\n   }\n}\n\n// =========================================\n// flex\n// =========================================\n\n@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {\n   display: $disp;\n   flex-direction: $dir;\n   flex-wrap: $wrap;\n   justify-content: $just;\n   align-items: $align;\n   gap: var(--gap, 1rem);\n}\n\n// =========================================\n// box-model\n// =========================================\n\n@mixin box-model($disp: null, $width: null, $height: null, $border: null) {\n   display: $disp;\n   width: $width;\n   height: $height;\n   border: $border;\n}\n\n// =========================================\n// position\n// =========================================\n\n@mixin position($pos, $width: null, $height: null, $z-index: null) {\n   position: $pos;\n   width: $width;\n   height: $height;\n   z-index: $z-index;\n   @content;\n}\n\n// =========================================\n// bg-img\n// =========================================\n\n@mixin bg-img($img: null, $position: null, $size: null) {\n   background-image: url('#{$img}');\n   background-repeat: no-repeat;\n   background-position: #{$position};\n   background-size: #{$size};\n}\n\n// =========================================\n// pseudo-el\n// =========================================\n\n@mixin p-el($el, $content: '', $width: null, $height: null) {\n   @if $el == 'before' or $el == 'after' {\n      &::#{$el} {\n         content: $content;\n         position: absolute;\n         display: block;\n         width: $width;\n         height: $height;\n         @content;\n      }\n   } @else {\n      @error 'Before or after string required for valid pseudo element.';\n   }\n}\n\n// =========================================\n// social-icons\n// =========================================\n\n@mixin social-icon() {\n   transition: transform 200ms linear, color 130ms linear;\n   &:hover,\n   &:focus {\n      color: var(--clr-pm-coral);\n      transform: scale(1.1);\n   }\n}\n\n// =========================================\n// media query\n// =========================================\n\n@mixin mq($width, $key) {\n   @if $width ==\n      'max-width' or\n      $width ==\n      'min-width' or\n      $key ==\n      'tablet' or\n      $key ==\n      'medium' or\n      $key ==\n      'large'\n   {\n      @media ($width: map-get($breakpoints, $key)) {\n         @content;\n      }\n   } @else {\n      @error 'Tablet, medium, large & valid width required for media query.';\n   }\n}\n\n// =========================================\n// feature queries\n// =========================================\n\n@mixin fq($prop, $val) {\n   @supports (#{$prop}: $val) {\n      @content;\n   }\n}\n\n@mixin fqs($selector) {\n   @supports selector(#{$selector}) {\n      @content;\n   }\n}\n","@use 'abstracts' as *;\n\n.form {\n   // @extend %bg-transparent;\n   // @extend %text-white;\n   width: 100%;\n   padding-top: 1rem;\n   border: 0 0 0.1px solid hsl(var(--clr-pm-white)) 0;\n   outline: none;\n   &::placeholder {\n      color: hsl(var(--clr-pm-white) / 0.7);\n   }\n   &:hover,\n   &:focus {\n      border-bottom-color: hsl(var(--clr-rapture-blue));\n   }\n\n   @include m(error) {\n      border-bottom-color: hsl(var(--clr-pm-coral));\n      &::placeholder {\n         color: hsl(var(--clr-pm-coral) / 0.7);\n      }\n   }\n\n   @include e(input) {\n      padding-bottom: 0.8rem;\n   }\n\n   @include e(text-area) {\n      padding-bottom: 3rem;\n   }\n}\n","/*\n.nav > * {}\n .nav > .active {} - re-usable active class\n*/\n","@use 'abstracts' as *;\n\n.small-border {\n   @include p-el(before, 20px, 5px) {\n      // @extend %bg-coral;\n      top: 0;\n      left: 0;\n   }\n   .hero &::before {\n      // @extend %bg-rapture;\n   }\n}\n","@use 'abstracts' as *;\n\n.header {\n   @include m(pm) {\n      padding: var(--ct-padding-lg);\n      outline: 3px solid red;\n   }\n   @include e(nav--container) {\n      position: relative;\n   }\n}\n\n// nav mobile\n\n.nav--sidebar__container {\n   //    position: fixed + overflow: hidden on body | inset: 0 0 0 30% (vs width: 75%) | z-index: 1000 | padding: min(6rem, 15vh) 2rem\n}\n\n.mobile-nav-toggle {\n   @include mq(max-width, tablet) {\n      outline: 1px solid pink;\n      @include box-model($disp: block);\n      padding: 0.5rem;\n      @include position(absolute, $width: 1.5rem, $z-index: 2000);\n      top: 10px;\n      right: 0;\n   }\n}\n\n// nav wide\n\n.nav--wide,\n.btn--contact--wide {\n   @include mq(max-width, tablet) {\n      display: none;\n   }\n}\n\n// HERO\n\n.hero {\n   @include m(parent) {\n      margin-top: var(--margin-test);\n   }\n}\n"]}