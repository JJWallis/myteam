{"version":3,"sources":["styles/base/_typography.scss","styles/abstracts/_variables.scss","styles/abstracts/_mixins.scss","styles/abstracts/_utilities.scss","styles/base/_base.scss","styles/base/_reset.scss","styles/components/_button.scss","styles/components/_sidebar.scss","styles/components/_small-border.scss","styles/components/_logo.scss","styles/components/_hero.scss","styles/components/_skip.scss","styles/components/_hamburger.scss","styles/components/_split.scss","styles/layout/_forms.scss","styles/layout/_header.scss","styles/layout/_nav.scss"],"names":[],"mappings":"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","file":"main.48b3db1d.css","sourceRoot":"../src","sourcesContent":["@use 'abstracts' as *;\n\n@import url('https://fonts.googleapis.com/css2?family=Livvic:wght@400;500;600;700&display=swap');\n\nbody {\n   font: var(--fw-regular) var(--fs-200) 'livvic', sans-serif;\n   line-height: var(--lh-200);\n}\n","@use 'maps' as *;\n@use 'mixins' as *;\n\n:root {\n   @each $color, $value in $colors {\n      --clr-#{$color}: #{$value};\n   }\n\n   @each $screen-size, $map in $type-scale {\n      @if $screen-size == small {\n         @each $size, $value in $map {\n            --#{$size}: #{$value};\n         }\n      } @else if $screen-size == large {\n         @include mq($width: min-width, $key: tablet) {\n            @each $size, $value in $map {\n               --#{$size}: #{$value};\n            }\n         }\n      } @else if $screen-size == lh-small {\n         @each $size, $value in $map {\n            --#{$size}: #{$value};\n         }\n      } @else if $screen-size == lh-large {\n         @include mq($width: min-width, $key: tablet) {\n            @each $size, $value in $map {\n               --#{$size}: #{$value};\n            }\n         }\n      } @else if $screen-size == weights {\n         @each $size, $value in $map {\n            --#{$size}: #{$value};\n         }\n      } @else if $screen-size == align-small {\n         @each $size, $value in $map {\n            --#{$size}: #{$value};\n         }\n      } @else if $screen-size == align-large {\n         @include mq($width: min-width, $key: tablet) {\n            @each $size, $value in $map {\n               --#{$size}: #{$value};\n            }\n         }\n      }\n   }\n\n   @each $prop, $value in $layout {\n      --#{$prop}: #{$value};\n   }\n}\n","@use 'maps' as *;\n\n// =========================================\n// BEM\n// =========================================\n\n@mixin e($element) {\n   &__#{$element} {\n      @content;\n   }\n}\n\n@mixin m($modifier) {\n   &--#{$modifier} {\n      @content;\n   }\n}\n\n// =========================================\n// flex\n// =========================================\n\n@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {\n   display: $disp;\n   flex-direction: $dir;\n   flex-wrap: $wrap;\n   justify-content: $just;\n   align-items: $align;\n}\n\n// =========================================\n// box-model\n// =========================================\n\n@mixin box-model($disp: null, $width: null, $height: null) {\n   display: $disp;\n   width: $width;\n   height: $height;\n}\n\n// =========================================\n// position\n// =========================================\n\n@mixin position($pos, $width: null, $height: null, $z-index: null) {\n   position: $pos;\n   width: $width;\n   height: $height;\n   z-index: $z-index;\n   @content;\n}\n\n// =========================================\n// bg-img\n// =========================================\n\n@mixin bg-img($img: null, $position: null, $size: null) {\n   background-image: url('#{$img}');\n   background-repeat: no-repeat;\n   background-position: $position;\n   background-size: $size;\n}\n\n// =========================================\n// pseudo-el\n// =========================================\n\n@mixin p-el(\n   $el,\n   $content: '',\n   $position: absolute,\n   $width: null,\n   $height: null\n) {\n   @if $el == 'before' or $el == 'after' {\n      &::#{$el} {\n         content: $content;\n         position: $position;\n         display: block;\n         width: $width;\n         height: $height;\n         @content;\n      }\n   } @else {\n      @error 'Before or after string required for valid pseudo element.';\n   }\n}\n\n// =========================================\n// social-icons\n// =========================================\n\n@mixin social-icon() {\n   transition: transform 200ms linear, color 130ms linear;\n   &:hover,\n   &:focus {\n      color: var(--clr-pm-coral);\n      transform: scale(1.1);\n   }\n}\n\n// =========================================\n// media query\n// =========================================\n\n@mixin mq($width, $key) {\n   @if $width ==\n      'max-width' or\n      $width ==\n      'min-width' or\n      $key ==\n      'tablet' or\n      $key ==\n      'large'\n   {\n      @media ($width: map-get($breakpoints, $key)) {\n         @content;\n      }\n   } @else {\n      @error 'Tablet, medium, large & valid width required for media query.';\n   }\n}\n\n// =========================================\n// feature queries\n// =========================================\n\n@mixin fq($prop, $val) {\n   @supports (#{$prop}: $val) {\n      @content;\n   }\n}\n\n@mixin fqs($selector) {\n   @supports selector(#{$selector}) {\n      @content;\n   }\n}\n","@use 'maps' as *;\n\n@each $color, $value in $colors {\n   @if $color ==\n      pm-white or\n      $color ==\n      pm-coral or\n      $color ==\n      rapture-blue or\n      $color ==\n      dark-green\n   {\n      .text-#{$color} {\n         color: var(--clr-#{$color}, $value);\n      }\n   }\n   .bg-#{$color} {\n      background-color: var(--clr-#{$color}, $value);\n   }\n}\n\n@each $screen-size, $map in $type-scale {\n   @if $screen-size == small {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-size: var(--#{$property});\n         }\n      }\n   }\n\n   @if $screen-size == lh-small {\n      @each $property, $value in $map {\n         .#{$property} {\n            line-height: var(--#{$property});\n         }\n      }\n   }\n\n   @if $screen-size == weights {\n      @each $property, $value in $map {\n         .#{$property} {\n            font-weight: var(--#{$property});\n         }\n      }\n   }\n\n   @if $screen-size == align-small {\n      @each $property, $value in $map {\n         .#{$property} {\n            text-align: var(--#{$property});\n         }\n      }\n   }\n}\n\n// =========================================\n// layout\n// =========================================\n\n.container {\n   width: 90%;\n   max-width: var(--align-mw);\n   margin-inline: auto;\n   outline: 1px solid white;\n}\n\n.flow > *:where(:not(:first-child)) {\n   margin-top: var(--flow-space, 1rem);\n}\n\n.sr-only {\n   position: absolute;\n   width: 1px;\n   height: 1px;\n   padding: 0;\n   margin: -1px;\n   overflow: hidden;\n   clip: rect(0, 0, 0, 0);\n   white-space: nowrap;\n   border: 0;\n}\n\n.hidden {\n   display: none;\n}\n\n.grid-container {\n   display: grid;\n}\n","@use 'abstracts' as *;\n\nfieldset {\n   padding: 0;\n   margin: 0;\n   border: none;\n}\n\na {\n   text-decoration: none;\n}\n\nbutton {\n   border: none;\n   outline: none;\n   background: transparent;\n   &:hover {\n      cursor: pointer;\n   }\n}\n\n// input {\n//    border: none;\n//    outline: 1px solid;\n// }\n\n// Accessibility\n\n// :focus-within {\n//    outline: 3px dotted red;\n// }\n","/* Box sizing rules */\n*,\n*::before,\n*::after {\n   box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n   margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n   list-style: none;\n   padding: 0;\n   margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n   scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n   min-height: 100vh;\n   text-rendering: optimizeSpeed;\n   line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n   text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n   max-width: 100%;\n   display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n   font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n   html:focus-within {\n      scroll-behavior: auto;\n   }\n   *,\n   *::before,\n   *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n   }\n}\n","@use 'abstracts' as *;\n\n.btn {\n   border-radius: 50px;\n   transition: border 0.2s ease-in-out, background-color 0.2s ease-in-out,\n      color 0.2s ease-in-out;\n\n   // =========================================\n   // primary\n   // =========================================\n\n   @include m(pm) {\n      display: inline-block;\n      padding: 0.4em 2.1em;\n      border: 2px solid;\n\n      @include m(light) {\n         @include mq(max-width, tablet) {\n            margin-top: 1.3rem;\n         }\n         // color: white\n         border-color: hsl(var(--clr-pm-white));\n         &:hover {\n            background-color: var(--clr-pm-white);\n            color: var(--clr-dark-green);\n            border-color: transparent;\n         }\n      }\n\n      @include m(dark) {\n         // @extend %text-dark;\n         // @extend %bg-transparent;\n         border-color: hsl(var(--clr-dark-green));\n         &:hover {\n            background-color: var(--clr-dark-green);\n            color: var(--clr-pm-white);\n         }\n      }\n   }\n\n   // =========================================\n   // secondary\n   // =========================================\n\n   @include m(sd) {\n      // @extend %text-dark;\n      // @extend %bg-white;\n      padding: 0.5em 2em;\n      border: none;\n      outline: none;\n      &:hover {\n         background-color: var(--clr-rapture-blue);\n      }\n   }\n\n   @include m(contact) {\n      padding: 0.7em 2em;\n   }\n\n   @include m(disabled) {\n      opacity: 0.5;\n   }\n}\n","@use 'abstracts' as *;\n\n.sidebar {\n   display: none;\n   @include mq(max-width, tablet) {\n      display: block;\n      padding: min(10rem, 20vh) 3rem;\n      position: fixed;\n      inset: 0 0 0 calc(100% - 347px);\n      width: 347px;\n      z-index: 1000;\n      overflow-x: hidden;\n      transform: translateX(100%);\n      transition: transform 0.5s ease-in-out;\n      @include bg-img(\n         $img: '../assets/bg/bg-pattern-about-1-mobile-nav-1.svg',\n         $position: calc(100% + 153px) 100%,\n         $size: 300px\n      );\n      & li:nth-child(2) {\n         margin-left: 0.4rem;\n      }\n      &[data-visible='true'] {\n         transform: translateX(0);\n      }\n   }\n}\n\n// Overlay\n\nbody {\n   @include mq(max-width, tablet) {\n      @include p-el('before', $position: fixed) {\n         inset: 0;\n         z-index: 999;\n         background-color: rgba(0, 0, 0, 0.55);\n         opacity: 0;\n         pointer-events: none;\n         transition: opacity 0.5s ease-in-out;\n      }\n      &[data-visible='true'] {\n         overflow-y: hidden;\n         @include p-el('before') {\n            opacity: 1;\n            pointer-events: all;\n         }\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.small-border {\n   @include p-el(before, $width: 60px, $height: 5px) {\n      background-color: var(--clr-pm-coral);\n      top: 0;\n      left: 0;\n   }\n\n   @include m(hero) {\n      @include mq($width: max-width, $key: large) {\n         @include p-el(before) {\n            opacity: 0;\n         }\n      }\n   }\n\n   .header--home & {\n      @include p-el(before) {\n         background-color: var(--clr-rapture-blue);\n      }\n   }\n\n   // .hero &::before {\n   //    // @extend %bg-rapture;\n   // }\n}\n","@use 'abstracts' as *;\n\n.logo {\n   @include m(pm) {\n      display: inline-block;\n   }\n}\n","@use 'abstracts' as *;\n\n.hero {\n   @include m(parent) {\n      margin-top: min(var(--margin-hero), 15vh);\n\n      @include e(child) {\n         & > article {\n            // change article? - specific component class > :first-child {...}\n            @include flexy($dir: column, $align: center);\n         }\n      }\n   }\n}\n\n.explainer {\n   width: 95%;\n   max-width: 610px;\n}\n","@use 'abstracts' as *;\n\n.skip-to-content {\n   @include position($pos: absolute, $z-index: 9999);\n   transform: translateY(-100%);\n   transition: transform 0.3s ease-in-out;\n   &:focus {\n      transform: translateY(0);\n   }\n}\n","@use 'abstracts' as *;\n\n.mobile-nav-toggle {\n   display: none;\n   @include mq(max-width, tablet) {\n      @include box-model($disp: block);\n      @include position(absolute, $width: 1.8rem, $z-index: 2000);\n      top: 0.2rem;\n      right: 0;\n      aspect-ratio: 1;\n      @include bg-img(\n         $img: '../assets/nav/icon-hamburger.svg',\n         $position: center,\n         $size: 100%\n      );\n      &[aria-expanded='true'] {\n         @include bg-img($img: '../assets/about/icon-close.svg');\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.split {\n   @include m(parent) {\n      @include flexy($dir: column, $align: center);\n      // flex-direction var instead\n      gap: var(--gap);\n   }\n\n   @include m(child) {\n      position: relative;\n   }\n}\n","@use 'abstracts' as *;\n\n.form {\n   // @extend %bg-transparent;\n   // @extend %text-white;\n   width: 100%;\n   padding-top: 1rem;\n   border: 0 0 0.1px solid hsl(var(--clr-pm-white)) 0;\n   outline: none;\n   &::placeholder {\n      color: hsl(var(--clr-pm-white) / 0.7);\n   }\n   &:hover,\n   &:focus {\n      border-bottom-color: hsl(var(--clr-rapture-blue));\n   }\n\n   @include m(error) {\n      border-bottom-color: hsl(var(--clr-pm-coral));\n      &::placeholder {\n         color: hsl(var(--clr-pm-coral) / 0.7);\n      }\n   }\n\n   @include e(input) {\n      padding-bottom: 0.8rem;\n   }\n\n   @include e(text-area) {\n      padding-bottom: 3rem;\n   }\n}\n","@use 'abstracts' as *;\n\n.header {\n   @include m(pm) {\n      padding: var(--ct-padding-lg);\n      // outline: 3px solid var(--clr-pm-coral);\n   }\n\n   @include m(home) {\n      padding-bottom: min(40vh, 18rem);\n      @include bg-img('../assets/bg/bg-pattern-home-2.svg', center 100%, 475px);\n   }\n\n   @include e(nav--container) {\n      position: relative;\n   }\n}\n","@use 'abstracts' as *;\n\n/*\n   .nav > * {}\n*/\n\nnav {\n   & a {\n      transition: color 0.2s ease-in-out;\n      &:hover {\n         color: var(--clr-pm-coral);\n      }\n   }\n}\n\n// nav wide\n\n.nav--wide,\n.btn--wide {\n   @include mq(max-width, tablet) {\n      display: none;\n   }\n}\n"]}