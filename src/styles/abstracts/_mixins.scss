@use 'variables' as *;
@use 'maps' as *;

// =========================================
// BEM
// =========================================

@mixin e($element) {
   &__#{$element} {
      @content;
   }
}

@mixin m($modifier) {
   &--#{$modifier} {
      @content;
   }
}

// =========================================
// flex
// =========================================

@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {
   display: $disp;
   flex-direction: $dir;
   flex-wrap: $wrap;
   justify-content: $just;
   align-items: $align;
   gap: var(--gap, 1rem);
}

// =========================================
// box-model
// =========================================

@mixin box-model($disp: null, $width: null, $height: null, $border: null) {
   display: $disp;
   width: $width;
   height: $height;
   border: $border;
}

// =========================================
// position
// =========================================

@mixin position($pos, $width: null, $height: null, $z-index: null) {
   position: $pos;
   width: $width;
   height: $height;
   z-index: $z-index;
   @content;
}

// =========================================
// bg-img
// =========================================

@mixin bg-img($img: null, $position: null, $size: null) {
   background-image: url('#{$img}');
   background-repeat: no-repeat;
   background-position: $position;
   background-size: $size;
}

// =========================================
// pseudo-el
// =========================================

@mixin p-el($el, $content: '', $width: null, $height: null) {
   @if $el == 'before' or $el == 'after' {
      &::#{$el} {
         content: $content;
         position: absolute;
         display: block;
         width: $width;
         height: $height;
         @content;
      }
   } @else {
      @error 'Before or after string required for valid pseudo element.';
   }
}

// =========================================
// social-icons
// =========================================

@mixin social-icon() {
   transition: transform 200ms linear, color 130ms linear;
   &:hover,
   &:focus {
      color: var(--clr-pm-coral);
      transform: scale(1.1);
   }
}

// =========================================
// media query
// =========================================

@mixin mq($width, $key) {
   @if $width ==
      'max-width' or
      $width ==
      'min-width' or
      $key ==
      'tablet' or
      $key ==
      'medium' or
      $key ==
      'large'
   {
      @media ($width: map-get($breakpoints, $key)) {
         @content;
      }
   } @else {
      @error 'Tablet, medium, large & valid width required for media query.';
   }
}

// =========================================
// feature queries
// =========================================

@mixin fq($prop, $val) {
   @supports (#{$prop}: $val) {
      @content;
   }
}

@mixin fqs($selector) {
   @supports selector(#{$selector}) {
      @content;
   }
}
